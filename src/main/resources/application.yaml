spring:
  profiles:
    active: local-default-mysql
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 411922572522-amjb41f97ahgnbq06jiicm13pt33nrg6.apps.googleusercontent.com
            client-secret: NP3ICbi4VpnrAAdUS5aAgK4u
  datasource:
    initialization-mode: always
  data:
    mongodb:
      ### for docker-local-mongodb
#      uri: mongodb://spring_user:112233@localhost/spring_database
      ### default: 원격 서버 docker 접속
      uri: mongodb://spring_user:112233@192.168.0.20/spring_database
      authentication-database: spring_database
    rest:
      base-path: /api
    jpa:
      repositories:
        enabled: true
  jpa:
    ## 추후 DDL이 필요없을 경우 삭제. 초기 테스트/빌드 업 시에만 사용해볼 것.
    hibernate:
      # Hibernate ddl auto (create, create-drop, validate, update)
      ddl-auto: create-drop
    generate-ddl: true
    show-sql: true
  devtools:
    livereload:
      enabled: true
logging:
  level:
    ROOT: DEBUG
    org.hibernate: DEBUG
    org.hibernate.type: trace

#     org.hibernate: DEBUG

---
spring:
  profiles: local-default-mysql
  datasource:
    platform: mysql
    url: jdbc:mysql://localhost:4306/spring_database
    username: root
    password: 112233
    dbcp2:
      driver-class-name: com.mysql.jdbc.Driver

---
spring:
  profiles: local-mariadb
  datasource:
    platform: mariadb
    url: jdbc:mariadb://localhost:4306/spring_database
    username: root
    password: 112233
    dbcp2:
      driver-class-name: org.mariadb.jdbc.Driver

---
spring:
  profiles: remote-container-mariadb
  datasource:
    url: jdbc:mariadb://192.168.0.20:4306/spring_database
    username: root
    password: 112233
    dbcp2:
      driver-class-name: org.mariadb.jdbc.Driver

---
spring:
  profiles: docker-container-mariadb
  datasource:
    url: jdbc:mariadb://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD}
    dbcp2:
      driver-class-name: org.mariadb.jdbc.Driver
